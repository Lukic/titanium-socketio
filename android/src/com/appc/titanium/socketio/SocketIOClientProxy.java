/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-Present by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.appc.titanium.socketio;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.util.TiConvert;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.WeakHashMap;

import io.socket.client.Ack;
import io.socket.client.Socket;
import io.socket.client.SocketIOException;
import io.socket.emitter.Emitter.Listener;

@Kroll.proxy(creatableInModule=TiSocketioModule.class)
public class SocketIOClientProxy extends KrollProxy
{
	// Standard Debugging variables
	private static final String LCAT = "SocketIOClientProxy";
	private static final boolean DBG = TiConfig.LOGD;

	private Socket socket;
	private WeakHashMap<KrollFunction, WeakReference<Listener>> callbackListenerMap;

	// Constructor
	public SocketIOClientProxy(Socket socket)
	{
		super();

		this.socket = socket;
		this.callbackListenerMap = new WeakHashMap<>();
	}

	@Kroll.getProperty
	public boolean getConnected()
	{
		return this.socket.connected();
	}

	// Methods
	@Kroll.method
	public void open()
	{
		this.socket.open();
	}

	@Kroll.method
	public void connect()
	{
		this.socket.connect();
	}

	@Kroll.method
	public void on(final String eventName, final KrollFunction callback)
	{
		Listener listener = new Listener() {
			@Override
			public void call(Object... args)
			{
				callback.call(getKrollObject(), convertArguments(args));
			}
		};
		this.socket.on(eventName, listener);
		this.callbackListenerMap.put(callback, new WeakReference<>(listener));
	}

	@Kroll.method
	public void once(String eventName, final KrollFunction callback)
	{
		Listener listener = new Listener() {
			@Override
			public void call(Object... args)
			{
				callback.call(getKrollObject(), convertArguments(args));
			}
		};
		this.socket.once(eventName, listener);
		this.callbackListenerMap.put(callback, new WeakReference<>(listener));
	}

	@Kroll.method
	public void off()
	{
		this.socket.off();
	}

	@Kroll.method
	public void off(String eventName)
	{
		this.socket.off(eventName);
	}

	@Kroll.method
	public void off(String eventName, KrollFunction callback)
	{
		WeakReference weakListenerReference = this.callbackListenerMap.get(callback);
		Listener listener = (Listener)weakListenerReference.get();
		if (listener != null) {
			this.socket.off(eventName, listener);
		}
	}

	@Kroll.method
	public void emit(String eventName, Object... args)
	{
		KrollFunction ackCallback = null;
		ArrayList<Object> data = new ArrayList<>();

		if (args.length > 0) {
			int lastArgumentIndex = args.length - 1;

			if (args[lastArgumentIndex] instanceof KrollFunction) {
				ackCallback = (KrollFunction)args[lastArgumentIndex];
				lastArgumentIndex -= 1;
			}

			for (int i = 0; i <= lastArgumentIndex; i++) {
				data.add(this.convertAndSanitizePayload(args[i]));
			}
		}

		if (ackCallback != null) {
			final KrollFunction finalAckCallback = ackCallback;
			this.socket.emit(eventName, data.toArray(), new Ack() {
				@Override
				public void call(Object... args) {
					finalAckCallback.call(getKrollObject(), convertArguments(args));
				}
			});
		} else {
			this.socket.emit(eventName, data.toArray());
		}
	}

	@Kroll.method
	public void close() {
		this.socket.close();
	}

	@Kroll.method
	public void disconnect() {
		this.socket.disconnect();
	}

	private Object[] convertArguments(Object[] args) {
		Object[] sanitizedArgs = new Object[args.length];

		for (int i = 0; i < args.length; i++) {
			if (args[i] instanceof Exception) {
				Exception socketException = (Exception)args[i];
				KrollDict errorDict = new KrollDict();
				errorDict.put("message", socketException.getMessage());
				sanitizedArgs[i] = errorDict;
			} else if (args[i] instanceof JSONObject) {
				JSONObject json = (JSONObject)args[i];
				try {
					sanitizedArgs[i] = new KrollDict(json);
				} catch (JSONException e) {
					Log.d(LCAT, "Failed to convert JSON object. Error: " + e.getMessage());
					sanitizedArgs[i] = null;
				}
			} else if (args[i] instanceof JSONArray) {
				JSONArray json = (JSONArray)args[i];
				sanitizedArgs[i] = KrollDict.fromJSON(json);
			} else {
				sanitizedArgs[i] = args[i];
			}
		}

		return sanitizedArgs;
	}

	private Object convertAndSanitizePayload(Object value) {
		if (value instanceof HashMap) {
			return TiConvert.toJSON((HashMap)value);
		} else if (value instanceof Object[]) {
			return TiConvert.toJSONArray((Object[])value);
		}

		return value;
	}
}
